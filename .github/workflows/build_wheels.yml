# Workflow to build and test wheel and source distributions
name: Build wheels

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  # Run the workflow when it is manually triggered
  workflow_dispatch:

jobs:
  # Build the wheels for Windows, Linux, and macOS
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that all wheel builders finish even if failures occur
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python: [36, 37, 38, 39]
        bitness: [32, 64]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          # MacOS 10.14 Mojave is the last version that supports 32-bit software
          - os: windows-latest
            bitness: 64
            platform_id: win_amd64
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            bitness: 32
            platform_id: manylinux_i686
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
        exclude:
          # Compilation for 32 bit version of Windows fails
          - os: windows-latest
            bitness: 32
          - os: macos-latest
            bitness: 32

    steps:
      - name: Provide gfortran (macOS)
        if: runner.os == 'macOS'
        run: |
          # https://github.com/actions/virtual-environments/issues/2524
          # https://github.com/cbg-ethz/dce/blob/master/.github/workflows/pkgdown.yaml
          sudo ln -s /usr/local/bin/gfortran-11 /usr/local/bin/gfortran
          sudo mkdir /usr/local/gfortran
          sudo ln -s /usr/local/Cellar/gcc@11/*/lib/gcc/11 /usr/local/gfortran/lib
          gfortran --version

      - name: Provide gfortran (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2

      - name: Tell distutils to use mingw (Windows)
        if: runner.os == 'Windows'
        run: echo "[build]`ncompiler=mingw32" | Out-File -Encoding ASCII ~/pydistutils.cfg

      - name: Checkout PDFO
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.0.0
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          # Package the DLL dependencies in the wheel for windows (done by default for the other platforms)
          # delvewheel cannot mangle the libraries, stripping does not work
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel show {wheel} && delvewheel repair -w {dest_dir} {wheel} --no-mangle-all"
          # Run the tests for each wheel
          CIBW_TEST_COMMAND: python -m unittest pdfo.testpdfo

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  # Build the source distribution
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PDFO
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build source distribution
        run: |
          # Move up two levels to create the building virtual environment outside of the source folder
          cd ../../
          # Create and activate the building virtual environment
          python -m venv build_env
          source build_env/bin/activate
          # Install the required Python dependencies
          python -m pip install numpy cython
          python -m pip install twine
          # Move down to the source folder
          cd pdfo/pdfo
          # Build the source distribution
          python setup.py sdist
          # Check the distribution file
          twine check dist/*.tar.gz

      - name: Test source distribution
        run: |
          # Move up two levels to create the testing virtual environment outside of the source folder
          cd ../../
          # Create and activate the testing virtual environment
          python -m venv test_env
          source test_env/bin/activate
          # Install PDFO via the source distribution
          python -m pip install pdfo/pdfo/dist/*.tar.gz
          # Initiate the tests of PDFO
          python -m unittest pdfo.testpdfo

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz
