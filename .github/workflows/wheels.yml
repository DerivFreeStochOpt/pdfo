# Workflow to build and test wheel and source distributions
name: wheels

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # 32-bit Linux manylinux2010
          - os: ubuntu-latest
            python: 37
            bitness: 32
            platform_id: manylinux_i686
            manylinux_image: manylinux2010
          - os: ubuntu-latest
            python: 38
            bitness: 32
            platform_id: manylinux_i686
            manylinux_image: manylinux2010
          - os: ubuntu-latest
            python: 39
            bitness: 32
            platform_id: manylinux_i686
            manylinux_image: manylinux2010

          # 64-bit Linux manylinux2010
          - os: ubuntu-latest
            python: 37
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2010
          - os: ubuntu-latest
            python: 38
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2010
          - os: ubuntu-latest
            python: 39
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2010

          # 64-bit Linux manylinux2014 x86_64
          - os: ubuntu-latest
            python: 37
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 38
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 39
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 310
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # 64-bit Linux manylinux2014 aarch64 (self-hosted runner not yet ready)
          # - os: self-hosted
          #   python: 37
          #   bitness: 64
          #   platform_id: manylinux_aarch64
          #   manylinux_image: manylinux2014
          # - os: self-hosted
          #   python: 38
          #   bitness: 64
          #   platform_id: manylinux_aarch64
          #   manylinux_image: manylinux2014
          # - os: self-hosted
          #   python: 39
          #   bitness: 64
          #   platform_id: manylinux_aarch64
          #   manylinux_image: manylinux2014
          # - os: self-hosted
          #   python: 310
          #   bitness: 64
          #   platform_id: manylinux_aarch64
          #   manylinux_image: manylinux2014

          # 64-bit Windows
          - os: windows-latest
            python: 37
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            python: 38
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            python: 39
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            python: 310
            bitness: 64
            platform_id: win_amd64

          # macOS x86_64
          - os: macos-latest
            bitness: 64
            python: 37
            platform_id: macosx_x86_64
          - os: macos-latest
            bitness: 64
            python: 38
            platform_id: macosx_x86_64
          - os: macos-latest
            bitness: 64
            python: 39
            platform_id: macosx_x86_64
          - os: macos-latest
            bitness: 64
            python: 310
            platform_id: macosx_x86_64

          # macOS arm64 (libgfortran not yet ready)
          #   + delocate-listdeps /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/cibuildwheela9fk2r30/built_wheel/pdfo-1.2-cp38-cp38-macosx_11_0_arm64.whl && delocate-wheel --require-archs arm64 -w /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/cibuildwheela9fk2r30/repaired_wheel /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/cibuildwheela9fk2r30/built_wheel/pdfo-1.2-cp38-cp38-macosx_11_0_arm64.whl
          #  /usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/libgcc_s.1.dylib
          #  /usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/libgfortran.5.dylib
          #  /usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/libquadmath.0.dylib
          #  Traceback (most recent call last):
          #    File "/Library/Frameworks/Python.framework/Versions/3.8/bin/delocate-wheel", line 8, in <module>
          #      sys.exit(main())
          #    File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/delocate/cmd/delocate_wheel.py", line 128, in main
          #      copied = delocate_wheel(
          #    File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/delocate/delocating.py", line 662, in delocate_wheel
          #      raise DelocationError(
          #  delocate.delocating.DelocationError: Some missing architectures in wheel
          #  Required arch arm64 missing from /usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/libgfortran.5.dylib
          #  Required arch arm64 missing from /usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/libquadmath.0.dylib
          # - os: macos-latest
          #   bitness: 64
          #   python: 38
          #   platform_id: macosx_arm64
          # - os: macos-latest
          #   bitness: 64
          #   python: 39
          #   platform_id: macosx_arm64
          # - os: macos-latest
          #   bitness: 64
          #   python: 310
          #   platform_id: macosx_arm64
          #   platform_id: macosx_arm64

    steps:
      - name: Provide gfortran (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2

      - name: Tell distutils to use mingw (Windows)
        if: runner.os == 'Windows'
        run: echo "[build]`ncompiler=mingw32" | Out-File -Encoding ASCII ~/pydistutils.cfg

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python
        if: runner.arch == 'X86' || runner.arch == 'X64'
        uses: actions/setup-python@v2

      - name: Build wheels
        run: bash build_tools/github/build_wheels.sh
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_AARCH64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_TEST_SKIP: "*-macosx_arm64"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir}
          CIBW_BEFORE_BUILD_WINDOWS: python -m pip install delvewheel
          CIBW_TEST_COMMAND: bash {project}/build_tools/github/test_wheels.sh
          CIBW_BUILD_VERBOSITY: 1

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  # Build the source distribution
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build source distribution
        run: bash build_tools/github/build_source.sh

      - name: Test source distribution
        run: bash build_tools/github/test_source.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  # Upload the distributions to Anaconda
  upload_anaconda:
    name: Upload to Anaconda
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    needs: [build_wheels, build_sdist]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Upload artifacts to Anaconda
        run: bash build_tools/github/upload_anaconda.sh
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}